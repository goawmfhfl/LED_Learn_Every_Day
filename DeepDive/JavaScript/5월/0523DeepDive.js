console.log('5월 23일 공부 기록')


// 13-1 스코프란?
{
    // var키워드로 선언한 변수와 let또는 const키워드로 선언한 변수의 스코프가 다르게 동작한다
    // 스코프는 변수 그리고 함수와 깊은 관련이 있다

    // 함수의 매개변수는 함수 몸체 내부에서만 참조할 수 있고, 외부에서 참조할 수 없다
    {
        function add(x,y){
            console.log(x,y); // 2 5
            return x + y;
        }

        add(2,5)

        // 매개변수는 함수 몸체 내부에서만 참조할 수 있다.
        // 즉, 매개변수의 스코프(유효범위)는 함수 몸체 내부다.

        // console.log(x,y) not defined
    }
}

{
    // 변수는 코드의 가장 바깥 영역뿐 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다
    // 이때 코드 블록 이나 함수는 중첩될 수 있다.

    var var1 = 1;

    if(true){
        var var2 = 2; // 코드 블록 내에서 선언한 변수
        if(true){
            var var3 = 3 // 중첩된 코드 블록 내에서 선언한 변수
        }
    }


    function foo(){
        var var4 = 4; // 함수 내에서 선언한 함수

        function bar(){
            var var5 = 5 // 중첩된 함수 내에서 선언한 변수
        }
    }

    console.log(var1) // 1
    console.log(var2) // 2
    console.log(var3) // 3
    // console.log(var4) // var4 is not defined
    // console.log(var5) // var5 is not defined
}

// 자신이 선언된 위치에 의해 유효한 범위, 즉 다른 코드가 변수 자신을 참조할 수 있는 범위가 결정된다
// 모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가
// 결정된다. 이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다.
console.clear()

{
    var x = 'global'
    function foo (){                         
        var x = 'local'   
        console.log(x)
    }
    foo()
    console.log(x)
    // 자바스크립트 엔진은 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정해야한다
    // 이를 식별자 결정이라고한다.
}          
// var 선언의 문제점
// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다.
// 이는 의도치 않게 변수값이 재할당되어 변경되는 부작용을 발생시킨다
{
function foo(){
    var x = 1
    var x = 2
    console.log(x) // 2
}
foo()

}

{
    function bar (){
        let x = 1
        //let x = 2
        console.log(x) // 'x' has already been declared
    }
    bar()
}

//13.2
{
    var x = 'global x';
    var y = 'global y';

    function outer(){
        var z ='outer`s local z';

        console.log(x) // globla x
        console.log(y) // globla y
        console.log(z) // outer`s local z

    function inner(){
        var x = 'inner`s local x'

        console.log(x)// inner`s local x
        console.log(y)// globla y
        console.log(z)// outer`s local z
    }
    inner()
    }
    outer()

    console.log(x); // globla x
    console.log(y); // globla y
}

// 13.2.2
// 지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서만 유효하다

// 13.3 스코프 체인
// 함수 몸체 내부에서 함수가 정의된 것을 '함수의 중첩'이라고 한다.
// 함수 몸체 내부에서 정의한 함수를 중첩함수 , 중첩함수를 포함하는 함수를 외부 함수라고한다.
// 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적 구조를 갖는다
// 이때 외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라 한다.

// 스코프체인 전역스코프 < outer지역 스코프 < inner지역 스코프
// 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는
// 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색 한다.

// 13.3.1 스코프 체인에 의한 변수 검색
// 자바스크립트 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 시작해서
// 상위스코프 방향으로 이동하며 선언된 변수를 검색한다.


// 13.3.2 스코프 체인에 의한 함수 검색
{
function foo (){
    console.log('global function foo');
}
function bar(){
    function foo(){
        console.log('local function foo');
    }
    foo()
}
bar() 
}

// 13.4 함수 레벨 스코프
// 지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했다.
// 이는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미다

// 대부분의 프로그래밍 언어는 함수 몸체만이 아니라 모든 코드 블록이 지역 스코프를 만든다
// 이러한 특성을 블록 레벨 스코프라 한다.
// 하지만 var 키워드로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다.
// 이러한 특성을 함수 레벨 스코프라고한다.
{
    var x = 1
    if (true){
        // var키워드로 선언된 변수는 함수의 코드 블록(함수몸체)만을 지역 스코프로 인정한다
        // 함수 밖에서 var 키워드로 선언된 변수는 코드 블록 내에서 선언되었다 할지라도 모두 전역 변수다.
        // 따라서 x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
        // 이는 의도치 않게 변수 값이 변경되는 부작용을 발생시킨다
        var x = 10
    }
    console.log(x) // 10
}

// var 키워드로 선언된 변수는 함수 레벨 스코프만 인정하기 때문에 함수 밖에서
// var 키워드로 선언된 변수는 코드 블록 내에서 선언되었다 할지라도 모두 전역변수다.
// 따라서 전역 변수 x는 중복 선언되고 그 결과 의도치 않은 전역 변수의 값이 재할당된다

{
var i = 10

for (var i = 0; i < 5; i++){
    console.log('for statement :',i) // 0 1 2 3 4
}

// 의도치 않게 변수의 값이 변경되었다.
console.log('i :',i)// 5
}

// 여기서 왜 5가 호출이 되었을까? for문에 의해서 i = 5 가 되었고 그 조건이 부합하여
// for 문 내에서는 선언이 안되었을뿐이고 이미 5로 할당되었다 이건가?

// 13.5렉시컬 스코프
{
    var x = 1
    function foo(){
        var x = 10;
        bar();
    }
    function bar(){
        console.log(x);
    }

    foo(); // 1
    bar(); // 1
}

// 함수를 정의하는 시점에는 함수가 어디서 호출될지 알 수 없다.
// 따라서 함수가 호출되는 시점에 동적으로 상위 스코프를 경정해야 하기 때문에
// 동적 스코프라고 부른다.

// 동적 스코프 방식처럼 상위 스코프가 동적으로 변하지 않고 함수 정의가
// 평가되는 시점에 상위 스코프가 정적으로 결정되기 때문에 정적 스코프라고 부른다.
// 자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다.

// 자바스크립트는 렉시컬 스코프를 따르므로 함수를 어디서 호출햇는지가 아니라
// 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다
// 함수가 호출된 위치ㄴ는 상위 스코프 결정에 어떠한 영향도 주지 않는다.
// 즉 함수의 상위 스코프는 언제나 자신이 정의된 스코프다.

// 이처럼 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다.
// 함수 정의가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다.
// 함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 있기 때문이다.

// 14. 전역 변수의 문제점
//14.1.1 지역 변수의 생명 주기
//
{
    function foo(){
        var a = 'local'
        console.log(a) //
        return a
    }
    foo() // local
    // console.log(a) // not defined
}

// 함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가
// 한 줄씩 순차적으로 실행되기 이전에 자바스크립트 엔진에 의해 먼저 실행된다.
// foo 함수를 호춣하면 함수 몸체의 다른 문들이 순차적으로 실행되기 이전에 x 변수의
// 선언문이 자바스크립트 엔진에 의해 가장 먼저 실행되어 x 변수가 선언되고 undefined로
// 초기화된다. 그 후, 함수 몸체를 구성하는 문들이 순차적으로 실행되기 시작하고
// 변수 할당문이 실행되면 x 변수에 값이 할당된다. 그리고 함수가 종료하면 x 변수도
// 소멸되어 생명 주기가 종료된다. 따라서 함수 내부에서 선언된 지역 변수 xsms 
// foo 함수가 호출되어 실행되는 동안에만 유효하다. 즉, 지역 변수의 생명 주기는 함수의 생명 주기와 일치한다.

{
    var x = 'global'
    function foo (){
        console.log(x)
        var x = 'local'
    }
    foo(); // undefined
    console.log(x) // global
}

// 호이스팅은 스코프를 단위로 동작한다.
// 지역 변수의 호이스팅은 지역 변수의 선언이 지역 스코프의 선두로 끌어 올려진 것처럼 동작한다
// 따라서 지역 변수는 함수 전체에서 유효하다.

// 14.1.2 전역 변수의 생명 주기
//var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치한다.
{
    var x = 'global'
    function foo (){
        var x = 'local'
        return x;
    }
    foo(); // global
    console.log(x) // global
}

// 14.2 전역 변수의 문제점

// 1. 암묵적 결합 
// 전역 변수를 선언한 의도는 전역, 즉 코드 어디서든 참조하고 할당할 수 있는
// 변수를 사용하겠다는 것이다.
// 이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합을 허용하는 것이다.
// 변수의 유효 범위가 크면 클수록 코드의 가도성은 나빠지고 의도치 않게
// 상태가 변경될 수 있는 위험성도 높아진다.

//2. 긴 생명주기
// 전역 변수의 생명 주기가 길다. 따라서 메모리 리소스도 오랜 기간 소비한다
// 변수 이름이 중복되면 의도치 않은 재할당이 이뤄진다..

//3. 스코프 체인 상에서 종점에 존재
// 전역 변수는 스코프 체인 상에서 종점에 존재한다. 이는 변수를 검색할 때
// 전역 변수가 가장 마지막에 검색된다는 것을 말한다. 즉 , 전역 변수의 검색 속도가
// 가장 느리다

//4. 네임스페이스 오염
//다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우
// 예상치 못한 결과를 가져올 수 있다.

// 14.3 전역 변수의 사용을 억제하는 방법
// 지역 변수를 사용해야한다. 변수의 스코프는 좁을수록 좋다.

// 14.3.1 즉시 실행 함수
{
    var Counter = ( function(){
        var num = 0

        return{
            increase(){
                return ++num;
            },
            decrease(){
                return --num;
            }
        };   
    }());

    console.log(Counter.num)// undefined

    console.log(Counter.increase()) // 1
    console.log(Counter.increase()) // 2
    console.log(Counter.decrease()) // 1
    console.log(Counter.decrease()) // 0

}

//14.3.4 ES6 모듈
// ES6 모듈을 사용하면 더는 전역 변수를 사용할 수 없다
// ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다.
// 따라서 모듈 내에서 var 키워드로 선언한 변수는 더는 전역 변수가 아니며
// window 객체의 프로퍼티도 아니다.